@import '~@angular/material/theming';
@import '../common/colors';
@import '../common/layout';

body {
  overflow-y: hidden !important;
  overflow-x: auto !important;
  font-family: Roboto, "Helvetica Neue", Arial, Helvetica, sans-serif;
  line-height: 1.3;
  font-size: 14px;
  margin: 0;
  padding: 0;
  color: #666666;
  -webkit-font-smoothing: antialiased;
}

* {
  box-sizing: border-box;
}

a {
  cursor: pointer;
  color: $blue;

  &:hover {
    color: $dark-blue;
  }
}

a, a:visited, a:active {
  text-decoration: none;
}

h1 {
  color: #212121;
  font-size: 32px;
  font-weight: 300;
  line-height: 1.2;
  margin: 0 0 0.5em 0;
  clear: both;
}
.title-container h1 { //mat h2
  font-size: 20px;
  font-weight: 500 !important;
}

.ng-component-container {
  padding: 20px;
  overflow-y: auto !important;
  height: calc(100vh - 100px) !important;
  background-color: #f6f6f6;
}

a[header].logo-placeholder {
  $box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
  display: inline-block;
  border: 1px dashed;
  border-radius: 2px;
  font-size: 32px;
  width: 100%;
  text-align: center;
  box-shadow: $box-shadow;
  color: #057ec1;
  &:hover {
    text-decoration: none;
    transition: all 5ms linear;
    box-shadow: $box-shadow, inset 0 0 0 25px rgba(0, 0, 0, 0.03)
  }
}

// forms and buttons
.mat-button,
.mat-raised-button {
  text-transform: uppercase;
  font-weight: 500;
}

mat-form-field.mat-form-field {
  font-size: 16px;
}

.mat-dialog-content search-select {
  display: block;
  margin-bottom: 16px;
}

// Dragula styles
/* in-flight clone */
.gu-mirror {
  position: fixed !important;
  margin: 0 !important;
  z-index: 9999 !important;
  opacity: 0.8;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
  filter: alpha(opacity=80);
  pointer-events: none;
}
/* high-performance display:none; helper */
.gu-hide {
  left: -9999px !important;
}
/* added to mirrorContainer (default = body) while dragging */
.gu-unselectable {
  -webkit-user-select: none !important;
  -moz-user-select: none !important;
  -ms-user-select: none !important;
  user-select: none !important;
}
/* added to the source element while its mirror is dragged */
.gu-transit {
  opacity: 0.2;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
  filter: alpha(opacity=20);
}
